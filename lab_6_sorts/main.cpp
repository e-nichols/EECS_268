/**
*	@file : Main.cpp
*	@author : Evan Nichols
*	@date : 2015.3.25
*	Purpose: Main.cpp allows users to interact with different sorting methods and compare their completion times. 
*/

#include <iostream>
#include <random>
#include <ctime>
#include <chrono>
#include <cassert>
#include <string>
#include "sorts.h"

//Print Menu (Helper Method)
void printMenu()
{
	std::cout 	<< "\n\nSelect a sort:\n"
			<< "1) Bubble Sort\n"
			<< "2) Insertion Sort\n"
			<< "3) Selection Sort\n"
			<< "4) Bogo Sort (use only with very small arrays!)\n"
			<< "Enter choice: ";
}

//Create Random Array (Helper Method)
//creates random array with user specified min and max random values

int* createRandomArray(int size, int min, int max) {

	//Declare and seed a generator
	std::default_random_engine generator(time(nullptr));

	//Declare distribution and define the range of the random numbers -- min and max variables used
	std::uniform_int_distribution<int> distribution(min, max);

	//Populate a new integer array with random numbers using the generator

	int* myArray = new int[size];

		for(int i = 0; i < size; i++) {

			//a single random generator is generated by below code:
			int randomNumber = distribution(generator);

			myArray[i] = randomNumber;
		}

		return myArray; 
}

void printArray(int* array, int size) {

	//Helper method to print array in main

	std::cout << "[";

	for(int i = 0; i < size; i++) {

		std::cout << array[i] << ", ";
	}

	std::cout << "] \n";
}

/*
In charge of getting the sort choice, array size, and min/max of the random value range from the user
Also times how long it takes to sort the random array with the sort that the user chose
*/

int main() {

	//Declaration of timing variables-.-.-.-.-.-.-.-.-.-.-.
	std::chrono::system_clock::time_point start;
	std::chrono::system_clock::time_point end;
	std::chrono::duration<double> elapsed;

	//declaration of user input variables
	int user_choice;
	int array_size;
	int lower_bound;
	int upper_bound;
	std::string print_array_choice;
	std::string end_program = "n";


while (end_program == "n") {
	
	//print the menu, gather necessary input from the user - what type of sort, array size, upper/lower bounds
	printMenu();

	std::cout << "Enter choice: \n"; 
	std::cin >> user_choice;

	std::cout << "Input a size for the random array: \n";
	std::cin >> array_size;

	std::cout << "Input a lower bound on the range of random numbers: \n";
	std::cin >> lower_bound;

	std::cout << "Input an upper bound on the range of random numbers: \n";
	std::cin >> upper_bound;

	//Let's make the array here.
	int* coolArray = createRandomArray(array_size, lower_bound, upper_bound);

	std::cout << "Do you want to print the unsorted array? (y/n): \n";
	std::cin >> print_array_choice;

		if(print_array_choice == "y") {

			std::cout << "Here is the unsorted array: \n";

			printArray(coolArray, array_size);

		}

		if(user_choice == 1) {

			//Bubble Sort here
			std::cout << "Running Bubble Sort...\n";

			//begin timing
			start = std::chrono::system_clock::now();

			//start sort
			sorts<int>::bubbleSort(coolArray,array_size);

			//end timing
			end = std::chrono::system_clock::now();

			elapsed = (end - start);

		}

		else if(user_choice == 2) {
			//Insertion Sort here

			std::cout << "Running Insertion Sort...\n";

			//begin timing
			start = std::chrono::system_clock::now();

			//start sort
			sorts<int>::bubbleSort(coolArray,array_size);

			//end timing
			end = std::chrono::system_clock::now();

			elapsed = (end - start);
		}

		else if(user_choice == 3) {
			//Insertion Sort here

			std::cout << "Running Selection Sort...\n";

			//begin timing
			start = std::chrono::system_clock::now();

			//start sort
			sorts<int>::bubbleSort(coolArray,array_size);

			//end timing
			end = std::chrono::system_clock::now();

			elapsed = (end - start);
		}

		else if(user_choice == 4) {
			//Insertion Sort here

			std::cout << "Running Bogo Sort...\n";

			//begin timing
			start = std::chrono::system_clock::now();

			//start sort
			sorts<int>::bubbleSort(coolArray,array_size);

			//end timing
			end = std::chrono::system_clock::now();

			elapsed = (end - start);
		}

	//Timing something
	std::cout << array_size << " numbers were sorted in " << elapsed.count() << " seconds\n";

	//output results, time, how many numbers were sorted, etc
	std::cout << "Here are the results and the array and other stuff\n";

	std::cout << "Do you want to print the sorted array? (y/n): \n";
	std::cin >> print_array_choice;

		if(print_array_choice == "y") {

			std::cout << "Here is the sorted array yay!! \n";

			printArray(coolArray, array_size);


		}

	//check to see if they want to sort more shit
	std::cout << "Do you want to quit? (y/n)\n";

	std::cin >> end_program;

//delete array
delete coolArray; 

}//end Program while



std::cout << "Program ending... goodbye\n";
//program terminating... code goes here 

return 0;

};
